// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  name, password, currency, balance
) VALUES ( $1, $2, $3, $4 ) RETURNING id, name, password, currency, balance, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	Name     string         `json:"name"`
	Password string         `json:"password"`
	Currency string         `json:"currency"`
	Balance  pgtype.Numeric `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Name,
		arg.Password,
		arg.Currency,
		arg.Balance,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, password, currency, balance, created_at, updated_at, deleted_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id pgtype.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
